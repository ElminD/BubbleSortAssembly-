//Authors: Nick Thomas (netid: nick02) Elmin Didic (netid: edidic )

//main function for this program
main: 
//Set up the variables
ORRI X19, XZR, #0 // int *a
ORRI X20, XZR, #10// (int length) 100
//save vars
SUBI SP, SP, #16
STUR X19, [SP, #0]
STUR X20, [SP, #8]
//set arguments
ORR X0, XZR, X19 // a* = a points to 
ORR X1, XZR, X20 // set n = legth

BL fill_array //fill(a, n)

//get vars back from fill
LDUR X19, [SP, #0]
LDUR X20, [SP, #8]
ORR X0, X19, XZR


//Grab the first and second variable
ORR X0, XZR, XZR 
ORRI X1, XZR, #1 
// //multiply by 3

BL swap 

ORRI X0, XZR, #1
ORRI X1, XZR,#2 
//multiply by 3
 
BL swap

BL fill_check 

B end
//fill in the array of length n with decreasing values from n -1 to zero (reverse sorted order)
fill_array: //void fill method fill(int *a,  int n)
//move to save reg
ORR X19, X0, XZR // int *a
ORR X20, X1, XZR // int n
ORRI X21, XZR, #0 // set int i = 0

//for(i = 0; i < n; i++)
fill_the_loop: 
SUBS XZR, X21, X20 // for i < n
B.GE fill_end

//pointers in the array
LSL X9, X21, #3 // i * 8
ADD X9, X19, X9 //a + (i * 8) 8bits 
//get value 
SUB X10, X20, X21 // n - i
SUBI X10, X10, #1 // (n - i) - 1
//set value to the pointer location in memory 
STUR X10, [X9, #0]

//end the for loop
ADDI X21, X21, #1

B fill_the_loop

fill_end:
//return statement 
BR LR

//testing purposes just delete after
fill_check:
LDUR X9, [X0, #0]
PRNT X9
LDUR X9, [X0, #8]
PRNT X9
LDUR X9, [X0, #16]
PRNT X9
LDUR X9, [X0, #24]
PRNT X9
LDUR X9, [X0, #32]
PRNT X9
LDUR X9, [X0, #40]
PRNT X9
LDUR X9, [X0, #48]
PRNT X9
LDUR X9, [X0, #56]
PRNT X9
LDUR X9, [X0, #64]
PRNT X9
LDUR X9, [X0, #72]
PRNT X9
BR LR

swap:			//swap takes two address arguments and swaps the data
LSL X0, X0, #3 
LSL X1, X1, #3 

LDUR X9, [X0, #0]
LDUR X10,[X1, #0]
STUR X9, [X1, #0]
STUR X10,[X0, #0]
BR LR

binary_search:



end: